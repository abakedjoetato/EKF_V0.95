
OBJECTIVE

You are launching a Replit session to initialize and repair a Deadside-themed Java Discord bot project provided as a .zip archive. This session involves four phases:

1. Full initialization and structure validation of the bot project


2. Diagnosing and repairing missing or broken command registrations


3. Upgrading output systems to use advanced embeds


4. Ensuring embed upgrades are fully integrated and error-free



All functionality must be proven, never assumed. All fixes must be confirmed via logs and real-world behavior.


---

PHASE 0 — PROJECT INIT (REQUIRED)

Perform these steps in order:

1. Unzip the uploaded .zip file from the attached assets


2. Move all contents from the unzipped directory to the project root


3. Clean up:

Remove any nested or duplicate folders (e.g., project/, DeadsideBot/)

Delete empty folders or broken symbolic links



4. Scan and log the following:

Main class (with main() entrypoint)

All parser classes

Config files (.env or config.properties)

All command/event handler classes

Any duplicate or unused files



5. Detect or create a .env or config.properties file


6. Load secrets from Replit, including:

BOT_TOKEN

MONGO_URI



7. Start the bot using JDA 5.x and confirm startup:

Bot must log in and connect to Discord successfully

Console logs must confirm gateway connection and guild presence




> Do not proceed to further phases unless the bot starts, connects, and loads without error.




---

PHASE 1 — COMPREHENSIVE SLASH COMMAND VERIFICATION & REPAIR

Issue:

Some slash commands appear to be loaded but are not available in Discord, or fail to function. This must be treated as a full system issue.

Mandatory Steps:

1. Discover All Commands


2. Compare Code vs Registered Commands


3. Trace Registration Logic


4. Validate Execution


5. Check for edge cases


6. Rebuild with Maven after every batch of changes and confirm changes reflect in production



Completion Criteria:

All commands from source are properly registered and visible in Discord

All commands execute without runtime errors

All output is logged, compiled, and verified through real Discord usage



---

PHASE 2 — ADVANCED EMBED INTEGRATION ACROSS ALL SYSTEMS

Objective:

Upgrade all embed outputs to modern, styled templates using:

Themed formatting (Deadside + emerald)

Right-side thumbnails via setThumbnail(...)

Context-specific styling (killfeed, stats, factions, etc.)

Footer: Powered by Discord.gg/EmeraldServers


Systems to Upgrade:

Killfeed / death notifications

Server events and connection logs

Leaderboards

Player and faction stats

Bounties and economy updates

All slash command feedback embeds



---

PHASE 3 — EMBED COMPATIBILITY AND SYSTEM INTEGRATION TESTING

Objective:

Ensure new embed formats:

Cause no Maven compile errors

Run cleanly in production

Integrate with the cooldowns, permission checks, and session management

Do not conflict with MongoDB models or existing dispatchers



---

FINAL COMPLETION CRITERIA

Task is only considered complete when:

[✓] Maven build is successful

[✓] Bot connects to Discord and MongoDB

[✓] All slash commands register and execute in Discord

[✓] All systems use updated, styled embeds

[✓] No runtime errors present

[✓] Bot startup is fully logged and verified



---

STRICT EXECUTION REQUIREMENT

All four phases must be completed in a single uninterrupted batch job.

Do not trigger checkpoints, partial reports, or early commits

Do not output until the task is confirmed complete

Trial and error is prohibited; each fix must be correct on the first implementation



---

DEVELOPMENT ETHOS — NON-NEGOTIABLE STANDARDS

We never make assumptions — All logic must be proven, tested, and validated

We always check for root issues — Fixes must solve the actual cause, not symptoms

We always double-check our information — No fix is final without secondary confirmation

We never take short cuts — No placeholders or temporary hacks

We make the right fix, the first time — Trial and error is prohibited

We treat instructions as one task — All logic must be fixed in complete, continuous batches

We never stop mid-task — Only log or commit after the full fix is verified in production


